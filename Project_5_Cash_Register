function checkCashRegister(price, cash, cid) {
  // find out how much is due back
  var dueBack = cash - price;

  var denoms = [
    ["PENNY", 0.01], 
    ["NICKEL", 0.05], 
    ["DIME", 0.1], 
    ["QUARTER", 0.25], 
    ["ONE", 1], 
    ["FIVE", 5], 
    ["TEN", 10], 
    ["TWENTY", 20], 
    ["ONE HUNDRED", 100]
  ];
  
  // find out how much is in the drawer
  var cashInDrawer = 0;
  // iterate through each spot in the array to extract the amount and add it to the total
  for (let i = 0; i < cid.length; i++) {
     cashInDrawer += cid[i][1];
  }
  cashInDrawer = Math.round(cashInDrawer * 100) / 100;

  // default empty message out
  var messageOut = {};

  // a function which will populate the message out
  function makeMessageOut(status, changeArrOutput) {
    return {
      status: status,
      change: changeArrOutput
    };
  }

  // default blank array for output change (to be populated, or not)
  var changeArr = [];

  // the case where you don't have enough cash in drawer
  if (dueBack > cashInDrawer) {
    messageOut = makeMessageOut("INSUFFICIENT_FUNDS", changeArr);
  } 

  // the case where you have exactly the right amount of change
  else if (dueBack === cashInDrawer) {
    messageOut = makeMessageOut("CLOSED", cid);
  } 
  
  // enough to make change, need to calculate what change to give
  else {
    for (let j = 1; j <= cid.length; j++) {
      
      // check if input cid has something for a particular denomination, starting with the end of the cid array (100s)
      if (cid[cid.length-j][1] !== 0) {
        
        // make sure it's not too big of a bill/coin to be useful
        if (cid[cid.length-j][1] <= dueBack) {
        
          // if you've reached the pennies of cid arrayand there's still money there, 
          // but less than what's due back, then say you don't have enough money and stop
          if (j === cid.length) {
            messageOut = makeMessageOut("INSUFFICIENT_FUNDS", changeArr);
            break;
          }
          
          // update the changeArr
          changeArr.unshift(cid[cid.length-j]);
          
          // update what's due back
          dueBack = Math.round((dueBack - changeArr[0][1]) * 100)/100;
        } else {
          
          // update the changeArr
          var numCoins = Math.floor(dueBack/(denoms[denoms.length-j][1]));
          if (numCoins != 0) {
            var tempAmt = Math.round((numCoins * denoms[denoms.length-j][1]) * 100) / 100;
            changeArr.unshift([cid[cid.length-j][0], tempAmt]);
            dueBack = Math.round((dueBack - changeArr[0][1]) * 100) / 100;
          }
        }
      }
      
      // stop the process once what is due back is down to 0
      if (dueBack <= 0) {
        break;
      }
    }
    
    // if changeArr was never populated, that means the right change isn't in the drawer, so error
    if (changeArr[0] === undefined) {
      messageOut = makeMessageOut("INSUFFICIENT_FUNDS", changeArr);
    } else {
      changeArr.reverse();
      messageOut = makeMessageOut("OPEN", changeArr);
    }
  }
  return messageOut;
}
